getwd()
library(TMB)
lengths <- runif(N_obs, lenght_min, length_max)
# Simulation data
N_obs <- 1000
lengths <- runif(N_obs, lenght_min, length_max)
N_obs <- 1000
length_min <- 200
length_max <- 550
lengths <- runif(N_obs, lenght_min, length_max)
lengths <- runif(N_obs, length_min, length_max)
lengths
length_min
lengths <- round(runif(N_obs, length_min, length_max))
lengths
weights <-
compile("tmb/length_weight.cpp")
weights <-
compile("tmb/length_weight.cpp")
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
a = 0.00001 # Intercept
b = 3
obs_sd <- 20
lengths <- round(runif(N_obs, length_min, length_max))
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
weights
lengths
a * (389^b)
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
lengths
weights
a
b
n
sigma
logSigma
compile("tmb/length_weight.cpp")
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
rm(list=ls())
library(TMB)
# Simulation data
N_obs <- 1000
length_min <- 20
length_max <- 55
# Parameters
a = 0.00001 # Intercept
b = 3
obs_sd <- 20
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
weights
lengths
obs_sd <- 2
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
weights
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
a * (lengths ^ b)
obs_sd <- 2
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs,
a * (lengths ^ b),
obs_sd)
weights
weight_test <- a * lengths ^b
weight_test
weights <- a * lengths ^b
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
# Plot length-at-age
plot(Age_i,Obs_i , xlab = "Age (yr)", ylab = "Length (mm)")
N_obs = 1000 # Number of observations
Min_age = 0 # Minimum age in the population
Max_age = 10 # Maximum age in the population
# Parameters
Obs_sd = 20 # Standard deviation in
Linf = 350 # Asymptoptic length/mean length at maximum age (mm)
k = .3 # Growth rate (yr^-1)
t0 = -1.5 # Estimated age at length 0 (yr)
# Simulation
Age_i = runif(N_obs, Min_age, Max_age)
Obs_i = rnorm(N_obs, # 1000 observations
Linf * (1 - exp(-k * (Age_i - t0))), # Each with a length
Obs_sd) # standard deviation
# Plot length-at-age
plot(Age_i,Obs_i , xlab = "Age (yr)", ylab = "Length (mm)")
rnorm(5)
rnorm(55, 10)
rnorm(5, 10)
rnorm(5, 10, 5)
###### Simulate data
N_obs = 10 # Number of observations
# Simulation
Age_i = runif(N_obs, Min_age, Max_age)
Age_i
Obs_i = rnorm(N_obs, # 1000 observations
Linf * (1 - exp(-k * (Age_i - t0))), # Each with a length
Obs_sd) # standard deviation
Obs_i
rnorm(N_obs, # 1000 observations
Linf * (1 - exp(-k * (Age_i - t0))), # Each with a length
1) # standard deviation
# Parameters
a = 0.000001 # Intercept
b = 3
obs_sd <- 2
lengths <- runif(N_obs, length_min, length_max)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
plot(lengths)
lengths
lengths <- runif(N_obs, length_min, length_max)
lengths
# Simulation data
N_obs <- 1000
lengths <- runif(N_obs, length_min, length_max)
lengths
plot(lengths)
plot(Age_i)
# Simulation
Age_i = runif(N_obs, Min_age, Max_age)
plot(Age_i)
# Simulation data
N_obs <- 1000
length_min <- 5  # cm
length_max <- 55 # cm
# Parameters
a = 0.000001 # Intercept
b = 3
obs_sd <- 2
lengths <- runif(N_obs, length_min, length_max)
plot(lengths)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
length_min <- 50  # mm
length_max <- 550 # mm
# Parameters
a = 0.00001 # Intercept
b = 3
obs_sd <- 2
lengths <- runif(N_obs, length_min, length_max)
plot(lengths)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
obs_sd <- 20
lengths <- runif(N_obs, length_min, length_max)
plot(lengths)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
obs_sd <- 50
lengths <- runif(N_obs, length_min, length_max)
plot(lengths)
weights <- rnorm(N_obs, a * (lengths ^ b), obs_sd)
# Plot length-at-age
plot(lengths, weights , xlab = "Length (cm)", ylab = "weights (g)")
compile("tmb/length_weight.cpp")
plot(lengths, weights , xlab = "Length (mm)", ylab = "weights (g)")
compile("tmb/length_weight.cpp")
compile("tmb/length_weight.cpp")
dyn.load(dynlib("tmb/length_weight"))
rm(list=ls())
library(TMB)
# Simulation data
N_obs <- 1000
length_min <- 50  # mm
length_max <- 550 # mm
# Parameters
a = 0.00001 # Intercept
b = 3
obs_sd <- 50
sim_length <- runif(N_obs, length_min, length_max)
plot(sim_length)
sim_weight <- rnorm(N_obs, a * (sim_length ^ b), obs_sd)
plot(sim_length, sim_weight , xlab = "Length (mm)", ylab = "weights (g)")
#compile("tmb/length_weight.cpp")
dyn.load(dynlib("tmb/length_weight"))
# Run the model
obj = MakeADFun(
data = list(weights = sim_weights, lengths = sim_length),
parameters = list(a = 0.00001, b = 3.0, logSigma = 0), DLL = "length_weight"
)
# Run the model
obj = MakeADFun(
data = list(weights = sim_weight, lengths = sim_length),
parameters = list(a = 0.00001, b = 3.0, logSigma = 0), DLL = "length_weight"
)
opt = nlminb(obj$par, obj$fn, obj, gr)
opt = nlminb(obj$par, obj$fn, obj$gr)
summ = summary(sdreport(obj))
summ
curve(summ[1,1] * sim_length ^ summ[2,1])
summ
curve(summ[1,1] * sim_length ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE)
?CURVE
?curve
summ[1,1]
summ[2,1]
sim_length
length_max
summ[1,1] * sim_length ^ summ[2,1]
curve(summ[1,1] * sim_length ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE)
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE)
library(TMB)
compile("tmb/length_weight.cpp")
#compile("tmb/length_weight.cpp")
dyn.load(dynlib("tmb/length_weight"))
library(tidyverse)
dat <- read_csv("data/sbrm_lw.csv")
# Input
a_strt = 0.00001 # parameter
b_strt = 3       # parameter
len_obs = dat$fork_length_mm
wgt_obs = dat$weight_g
#compile("tmb/length_weight.cpp")
dyn.load(dynlib("tmb/length_weight"))
# Run the model
obj = MakeADFun(
data = list(wgt = wgt_obs, len = len_obs),
parameters = list(a = 0.00001, b = 3.0, logSigma = 0), DLL = "length_weight"
)
opt = nlminb(obj$par, obj$fn, obj$gr)
summ = summary(sdreport(obj))
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE)
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
#add = TRUE,
xlab = 'Length',
ylab = 'Weight')
plot(len_obs, wgt_obs , xlab = "Length", ylab = "Weights")
rm(list=ls())
library(TMB)
library(tidyverse)
dat <- read_csv("data/sbrm_lw.csv")
# # Simulation data
# N_obs <- 1000
# length_min <- 50  # mm
# length_max <- 550 # mm
# obs_sd <- 50
# Input
a_strt = 0.00001 # parameter
b_strt = 3       # parameter
logSigma = 0
len_obs = dat$fork_length_mm
wgt_obs = dat$weight_g
plot(len_obs, wgt_obs , xlab = "Length", ylab = "Weights")
#sim_length <- runif(N_obs, length_min, length_max)
#plot(sim_length)
#sim_weight <- rnorm(N_obs, a * (sim_length ^ b), obs_sd)
#compile("tmb/length_weight.cpp")
dyn.load(dynlib("tmb/length_weight"))
# Run the model
obj = MakeADFun(
data = list(wgt = wgt_obs, len = len_obs),
parameters = list(a = a_start, b = b_start, logSigma = logSigma),
DLL = "length_weight"
)
# Run the model
obj = MakeADFun(
data = list(wgt = wgt_obs, len = len_obs),
parameters = list(a = a_strt, b = b_strt, logSigma = logSigma),
DLL = "length_weight"
)
opt = nlminb(obj$par, obj$fn, obj$gr)
summ = summary(sdreport(obj))
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
len_obs_min = min(len_obs)
len_obs_max = max(len_obs)
curve(summ[1,1] * x ^ summ[2,1],
from = 0,
to = length_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
curve(summ[1,1] * x ^ summ[2,1],
from = len_obs_min,
to = len_obs_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
fit_lw <- function (len_obs, wgt_obs, a_strt, b_strt, logSigma = 0){
# Get min and max lengths for plots
len_obs_min = min(len_obs)
len_obs_max = max(len_obs)
# Plot observed data
plot(len_obs, wgt_obs , xlab = "Length", ylab = "Weight")
# Load model
dyn.load(dynlib("tmb/length_weight"))
# Run the model
obj = MakeADFun(
data = list(wgt = wgt_obs, len = len_obs),
parameters = list(a = a_strt, b = b_strt, logSigma = logSigma),
DLL = "length_weight"
)
opt = nlminb(obj$par, obj$fn, obj$gr)
summ = summary(sdreport(obj))
curve(summ[1,1] * x ^ summ[2,1],
from = len_obs_min,
to = len_obs_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
}
fit_lw(len_obs = dat$fork_length_mm,
wgt_obs = dat$weight_g,
a_strt = 0.000001,
b = 3)
print(a)
print(summ[1,1])
print(paste0('Parameter a = ', summ[1,1]))
print(paste0('Parameter b = ', summ[2,1]))
summ
print(summ)
fit_lw <- function (len_obs, wgt_obs, a_strt, b_strt, logSigma = 0){
# Get min and max lengths for plots
len_obs_min = min(len_obs)
len_obs_max = max(len_obs)
# Plot observed data
plot(len_obs, wgt_obs , xlab = "Length", ylab = "Weight")
# Load model
dyn.load(dynlib("tmb/length_weight"))
# Run the model
obj = MakeADFun(
data = list(wgt = wgt_obs, len = len_obs),
parameters = list(a = a_strt, b = b_strt, logSigma = logSigma),
DLL = "length_weight"
)
opt = nlminb(obj$par, obj$fn, obj$gr)
summ = summary(sdreport(obj))
print(summ)
curve(summ[1,1] * x ^ summ[2,1],
from = len_obs_min,
to = len_obs_max,
col = 2,
add = TRUE,
xlab = 'Length',
ylab = 'Weight')
}
fit_lw(len_obs = dat$fork_length_mm,
wgt_obs = dat$weight_g,
a_strt = 0.000001,
b = 3)
library(roxygen2)
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
install.packages("roxygen2")
library(roxygen2)
roxygenise()
roxygenise()
